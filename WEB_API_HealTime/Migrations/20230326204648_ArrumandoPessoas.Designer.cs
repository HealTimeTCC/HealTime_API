// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WEB_API_HealTime.Data;

#nullable disable

namespace WEB_API_HealTime.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230326204648_ArrumandoPessoas")]
    partial class ArrumandoPessoas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.ConsultaAgendada", b =>
                {
                    b.Property<int>("ConsultasAgendadasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultasAgendadasId"));

                    b.Property<DateTime>("DataConsulta")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataSolicitacaoConsulta")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Encaminhamento")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("MotivoConsulta")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("StatusConsultaId")
                        .HasColumnType("int");

                    b.HasKey("ConsultasAgendadasId")
                        .HasName("PK_ConsultaAgendadaId");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("StatusConsultaId");

                    b.ToTable("ConsultasAgendadas");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.ConsultaCancelada", b =>
                {
                    b.Property<int>("ConsultaCanceladaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultaCanceladaId"));

                    b.Property<int>("ConsultaAgendadaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCancelamento")
                        .HasColumnType("DATETIME");

                    b.Property<string>("MotivoCancelamento")
                        .IsRequired()
                        .HasColumnType("VARCHAR(300)");

                    b.HasKey("ConsultaCanceladaId", "ConsultaAgendadaId")
                        .HasName("PK_ConsultaCancelada_ConsultaAgendada");

                    b.HasIndex("ConsultaAgendadaId")
                        .IsUnique();

                    b.ToTable("ConsultaCanceladas");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.Especialidade", b =>
                {
                    b.Property<int>("EspecialidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EspecialidadeId"));

                    b.Property<string>("DescEspecialidade")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.HasKey("EspecialidadeId")
                        .HasName("PK_EspecialidadeId");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            EspecialidadeId = 1,
                            DescEspecialidade = "Cardiologia"
                        },
                        new
                        {
                            EspecialidadeId = 2,
                            DescEspecialidade = "Dermatologia"
                        },
                        new
                        {
                            EspecialidadeId = 3,
                            DescEspecialidade = "Ginecologia/Obstetrícia"
                        },
                        new
                        {
                            EspecialidadeId = 4,
                            DescEspecialidade = "Ortopedia"
                        },
                        new
                        {
                            EspecialidadeId = 5,
                            DescEspecialidade = "Anestesiologia"
                        },
                        new
                        {
                            EspecialidadeId = 6,
                            DescEspecialidade = "Pediatria"
                        },
                        new
                        {
                            EspecialidadeId = 7,
                            DescEspecialidade = "Oftalmologia"
                        },
                        new
                        {
                            EspecialidadeId = 8,
                            DescEspecialidade = "Psiquiatria"
                        },
                        new
                        {
                            EspecialidadeId = 9,
                            DescEspecialidade = "Urologia"
                        },
                        new
                        {
                            EspecialidadeId = 10,
                            DescEspecialidade = "Oncologia"
                        },
                        new
                        {
                            EspecialidadeId = 11,
                            DescEspecialidade = "Endocrinologia"
                        },
                        new
                        {
                            EspecialidadeId = 12,
                            DescEspecialidade = "Neurologia"
                        },
                        new
                        {
                            EspecialidadeId = 13,
                            DescEspecialidade = "Hematologia"
                        },
                        new
                        {
                            EspecialidadeId = 14,
                            DescEspecialidade = "Cirurgia Plástica"
                        });
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.Medico", b =>
                {
                    b.Property<int>("MedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicoId"));

                    b.Property<string>("CrmMedico")
                        .HasColumnType("CHAR(6)");

                    b.Property<string>("NmMedico")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("UfCrmMedico")
                        .IsRequired()
                        .HasColumnType("CHAR(2)");

                    b.HasKey("MedicoId")
                        .HasName("PK_MedicoId");

                    b.ToTable("Medicos");

                    b.HasData(
                        new
                        {
                            MedicoId = 1,
                            CrmMedico = "054321",
                            NmMedico = "Dr Val",
                            UfCrmMedico = "SP"
                        },
                        new
                        {
                            MedicoId = 2,
                            CrmMedico = "012345",
                            NmMedico = "Dr Teste",
                            UfCrmMedico = "RJ"
                        });
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.StatusConsulta", b =>
                {
                    b.Property<int>("StatusConsultaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusConsultaId"));

                    b.Property<string>("DescStatusConsulta")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.HasKey("StatusConsultaId")
                        .HasName("PK_StatusConsultaId");

                    b.ToTable("StatusConsultas");

                    b.HasData(
                        new
                        {
                            StatusConsultaId = 1,
                            DescStatusConsulta = "Encerrada"
                        },
                        new
                        {
                            StatusConsultaId = 2,
                            DescStatusConsulta = "Agendada"
                        },
                        new
                        {
                            StatusConsultaId = 3,
                            DescStatusConsulta = "Cancelada"
                        },
                        new
                        {
                            StatusConsultaId = 4,
                            DescStatusConsulta = "Remarcada"
                        },
                        new
                        {
                            StatusConsultaId = 5,
                            DescStatusConsulta = "Fila de espera"
                        });
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.Medicacao", b =>
                {
                    b.Property<int>("MedicacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicacaoId"));

                    b.Property<string>("CompostoAtivoMedicacao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Generico")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<string>("LaboratorioMedicaocao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("NomeMedicacao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.Property<int>("StatusMedicacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("TipoMedicacaoId")
                        .HasColumnType("int");

                    b.HasKey("MedicacaoId")
                        .HasName("PK_MedicacaoId");

                    b.HasIndex("TipoMedicacaoId");

                    b.ToTable("Medicacoes");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.PrescricaoMedicacao", b =>
                {
                    b.Property<int>("PrescricaoPacienteId")
                        .HasColumnType("int");

                    b.Property<int>("MedicacaoId")
                        .HasColumnType("int");

                    b.Property<int>("Duracao")
                        .HasColumnType("int");

                    b.Property<int>("Intervalo")
                        .HasColumnType("int");

                    b.Property<int>("Qtde")
                        .HasColumnType("int");

                    b.Property<string>("StatusMedicacaoFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(1)")
                        .HasDefaultValue("S");

                    b.HasKey("PrescricaoPacienteId", "MedicacaoId")
                        .HasName("PK_CONCAT_PrescricaPacienteId_MedicacaoId");

                    b.HasIndex("MedicacaoId")
                        .IsUnique();

                    b.HasIndex("PrescricaoPacienteId");

                    b.ToTable("PrescricoesMedicacoes");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.PrescricaoPaciente", b =>
                {
                    b.Property<int>("PrescricaoPacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescricaoPacienteId"));

                    b.Property<DateTime?>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("DATETIME");

                    b.Property<string>("DescFichaPessoa")
                        .HasColumnType("VARCHAR(350)");

                    b.Property<DateTime>("Emissao")
                        .HasColumnType("DATETIME");

                    b.Property<string>("FlagStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("CHAR(1)")
                        .HasDefaultValue("S");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("DATETIME");

                    b.HasKey("PrescricaoPacienteId")
                        .HasName("PK_PrescricaoPacienteId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("PrescricaoPacientes");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.TipoMedicacao", b =>
                {
                    b.Property<int>("TipoMedicacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoMedicacaoId"));

                    b.Property<int>("ClasseAplicacao")
                        .HasColumnType("int");

                    b.Property<string>("DescMedicacao")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("TituloTipoMedicacao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("TipoMedicacaoId")
                        .HasName("PK_TipoMedicacaoId");

                    b.ToTable("TiposMedicacoes");

                    b.HasData(
                        new
                        {
                            TipoMedicacaoId = 1,
                            ClasseAplicacao = 1,
                            DescMedicacao = "Aplicado pela boca",
                            TituloTipoMedicacao = "Via oral"
                        },
                        new
                        {
                            TipoMedicacaoId = 2,
                            ClasseAplicacao = 1,
                            DescMedicacao = "Aplicado  por dembaixo da língua",
                            TituloTipoMedicacao = "Sublingual"
                        },
                        new
                        {
                            TipoMedicacaoId = 3,
                            ClasseAplicacao = 1,
                            DescMedicacao = "Aplicado pelo canal retal",
                            TituloTipoMedicacao = "Supositorios"
                        },
                        new
                        {
                            TipoMedicacaoId = 4,
                            ClasseAplicacao = 2,
                            DescMedicacao = "Aplicada diretamente no sangue",
                            TituloTipoMedicacao = "Intravenosa"
                        },
                        new
                        {
                            TipoMedicacaoId = 5,
                            ClasseAplicacao = 2,
                            DescMedicacao = "Aplicada diretamente no músculo",
                            TituloTipoMedicacao = "Intramuscular"
                        },
                        new
                        {
                            TipoMedicacaoId = 6,
                            ClasseAplicacao = 2,
                            DescMedicacao = "Aplicada debaixo da pele",
                            TituloTipoMedicacao = "Subcutânea"
                        },
                        new
                        {
                            TipoMedicacaoId = 7,
                            ClasseAplicacao = 2,
                            DescMedicacao = "",
                            TituloTipoMedicacao = "Respiratória"
                        },
                        new
                        {
                            TipoMedicacaoId = 8,
                            ClasseAplicacao = 2,
                            DescMedicacao = "Aplicada por pomadas",
                            TituloTipoMedicacao = "Via tópica"
                        },
                        new
                        {
                            TipoMedicacaoId = 9,
                            ClasseAplicacao = 2,
                            DescMedicacao = "",
                            TituloTipoMedicacao = "Via Ocular"
                        },
                        new
                        {
                            TipoMedicacaoId = 10,
                            ClasseAplicacao = 2,
                            DescMedicacao = "",
                            TituloTipoMedicacao = "Via Nasal"
                        },
                        new
                        {
                            TipoMedicacaoId = 11,
                            ClasseAplicacao = 2,
                            DescMedicacao = "",
                            TituloTipoMedicacao = "Via Auricular"
                        });
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Pessoas.EnderecoPessoa", b =>
                {
                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<string>("BairroLogradouro")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("CEPEndereco")
                        .IsRequired()
                        .HasColumnType("CHAR(8)");

                    b.Property<string>("CidadeEndereco")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("Complemento")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("NroLogradouro")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("UFEndereco")
                        .IsRequired()
                        .HasColumnType("CHAR(2)");

                    b.HasKey("PessoaId")
                        .HasName("PK_FK_EnderecoPessoa");

                    b.ToTable("EnderecoPessoa");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Pessoas.Pessoa", b =>
                {
                    b.Property<int>("PessoaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PessoaId"));

                    b.Property<string>("CpfPessoa")
                        .IsRequired()
                        .HasColumnType("CHAR(11)");

                    b.Property<DateTime?>("DtNascPessoa")
                        .IsRequired()
                        .HasColumnType("DATETIME");

                    b.Property<string>("NomePessoa")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SobreNomePessoa")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("int");

                    b.HasKey("PessoaId")
                        .HasName("PK_PessoaId");

                    b.ToTable("Pessoas");

                    b.HasData(
                        new
                        {
                            PessoaId = 1,
                            CpfPessoa = "12345678909",
                            DtNascPessoa = new DateTime(2004, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NomePessoa = "Dan",
                            PasswordHash = new byte[] { 196, 108, 45, 136, 136, 154, 199, 121, 14, 222, 88, 198, 102, 25, 159, 141, 134, 58, 117, 190, 114, 183, 52, 235, 61, 94, 152, 77, 232, 105, 100, 65, 91, 230, 168, 75, 66, 48, 227, 188, 207, 86, 211, 101, 69, 204, 43, 193, 20, 21, 243, 152, 174, 149, 33, 110, 104, 129, 236, 48, 249, 99, 21, 65 },
                            PasswordSalt = new byte[] { 84, 51, 202, 234, 37, 244, 59, 157, 203, 35, 199, 221, 74, 93, 11, 96, 176, 14, 15, 237, 83, 202, 111, 227, 184, 158, 166, 251, 83, 54, 5, 186, 228, 0, 28, 8, 79, 50, 227, 202, 65, 123, 79, 129, 42, 117, 10, 105, 237, 116, 130, 242, 167, 11, 76, 224, 209, 157, 80, 178, 224, 251, 144, 170, 242, 47, 195, 44, 92, 130, 125, 254, 142, 20, 7, 68, 157, 242, 9, 190, 66, 241, 79, 49, 211, 124, 33, 255, 251, 1, 90, 118, 202, 52, 197, 209, 211, 182, 225, 145, 146, 155, 58, 237, 24, 180, 101, 11, 197, 84, 50, 77, 95, 243, 190, 19, 239, 215, 60, 65, 97, 89, 238, 205, 138, 126, 194, 91 },
                            SobreNomePessoa = "Marzo",
                            TipoPessoa = 3
                        });
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.ConsultaAgendada", b =>
                {
                    b.HasOne("WEB_API_HealTime.Models.ConsultasMedicas.Especialidade", "Especialidade")
                        .WithMany("ConsultaAgendadas")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EspecialidadeId");

                    b.HasOne("WEB_API_HealTime.Models.ConsultasMedicas.Medico", "Medico")
                        .WithMany("ConsultaAgendadas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicoId_ConsultaAgendadaId");

                    b.HasOne("WEB_API_HealTime.Models.ConsultasMedicas.StatusConsulta", "StatusConsulta")
                        .WithMany("ConsultasAgendadas")
                        .HasForeignKey("StatusConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConsultaAgendadas_StatusConsulta");

                    b.Navigation("Especialidade");

                    b.Navigation("Medico");

                    b.Navigation("StatusConsulta");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.ConsultaCancelada", b =>
                {
                    b.HasOne("WEB_API_HealTime.Models.ConsultasMedicas.ConsultaAgendada", "ConsultaAgendada")
                        .WithOne("ConsultaCancelada")
                        .HasForeignKey("WEB_API_HealTime.Models.ConsultasMedicas.ConsultaCancelada", "ConsultaAgendadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConsultaAgendadaId");

                    b.Navigation("ConsultaAgendada");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.Medicacao", b =>
                {
                    b.HasOne("WEB_API_HealTime.Models.Medicacoes.TipoMedicacao", "TipoMedicacao")
                        .WithMany("Medicacoes")
                        .HasForeignKey("TipoMedicacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Medicacao_TipoMedicacao");

                    b.Navigation("TipoMedicacao");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.PrescricaoMedicacao", b =>
                {
                    b.HasOne("WEB_API_HealTime.Models.Medicacoes.Medicacao", "Medicacao")
                        .WithOne("PrescricaoMedicacao")
                        .HasForeignKey("WEB_API_HealTime.Models.Medicacoes.PrescricaoMedicacao", "MedicacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_MedicacaoId_PrescricaoMedicao");

                    b.HasOne("WEB_API_HealTime.Models.Medicacoes.PrescricaoPaciente", "PrescricaoPaciente")
                        .WithMany("PrescricoesMedicacoes")
                        .HasForeignKey("PrescricaoPacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_PrescricaoPacienteId_PrescricaoMedicao");

                    b.Navigation("Medicacao");

                    b.Navigation("PrescricaoPaciente");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.PrescricaoPaciente", b =>
                {
                    b.HasOne("WEB_API_HealTime.Models.ConsultasMedicas.Medico", "Medico")
                        .WithMany("PrescricoesPacientes")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PrescricaoPaciente_Medico");

                    b.HasOne("WEB_API_HealTime.Models.Pessoas.Pessoa", "Pessoa")
                        .WithMany("PrescricaoPacientes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PacienteId_PrescricoesPacientes");

                    b.Navigation("Medico");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Pessoas.EnderecoPessoa", b =>
                {
                    b.HasOne("WEB_API_HealTime.Models.Pessoas.Pessoa", "Pessoa")
                        .WithOne("EnderecoPessoa")
                        .HasForeignKey("WEB_API_HealTime.Models.Pessoas.EnderecoPessoa", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PK_EnderecoPessoa");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.ConsultaAgendada", b =>
                {
                    b.Navigation("ConsultaCancelada");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.Especialidade", b =>
                {
                    b.Navigation("ConsultaAgendadas");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.Medico", b =>
                {
                    b.Navigation("ConsultaAgendadas");

                    b.Navigation("PrescricoesPacientes");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.ConsultasMedicas.StatusConsulta", b =>
                {
                    b.Navigation("ConsultasAgendadas");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.Medicacao", b =>
                {
                    b.Navigation("PrescricaoMedicacao");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.PrescricaoPaciente", b =>
                {
                    b.Navigation("PrescricoesMedicacoes");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Medicacoes.TipoMedicacao", b =>
                {
                    b.Navigation("Medicacoes");
                });

            modelBuilder.Entity("WEB_API_HealTime.Models.Pessoas.Pessoa", b =>
                {
                    b.Navigation("EnderecoPessoa");

                    b.Navigation("PrescricaoPacientes");
                });
#pragma warning restore 612, 618
        }
    }
}
